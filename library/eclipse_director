#!/bin/bash

script() {
  [[ ${0##*/} = eclipse_director ]]
}

fail() {
  local _msg=$1
  local _stdout=$2
  printf '{ "failed": true, "msg": "%s", "stdout": "%s" }\n' "$_msg" "$_stdout" >&2
  { script && exit 1; } || return 1
}

result() {
  declare -g -r $1="$2" 2>/dev/null || fail "invalid result identifier: $1"
}

release_repository() {
  local _result_name=$1
  local _eclipse
  _eclipse=$(readlink -f $(which eclipse))
  local _stdout
  _stdout=$(sed -n -r '/^repositories.*org_releases_\w+\//{;s///;s/\\//;s/uri=//p}'\
    ${_eclipse%/*}/p2/org.eclipse.equinox.p2.engine/.settings/org.eclipse.equinox.p2.metadata.repository.prefs) || \
    fail "couldn't determine release repository"
  result "$_result_name" "$_stdout"
}

verify() {
  local _iu=$1
  local _stdout
  _stdout=$(eclipse -nosplash -application org.eclipse.equinox.p2.director\
   -uninstallIU "$_iu"\
   -verifyOnly 2>&1)
  local _verify=$?
  if [[ $_verify -eq 0 ]]; then
    return 0
  elif [[ $_verify -eq 13 ]]; then
    return 1
  else
    fail "couldn't determine state of $_iu" "$_stdout"
  fi
}

install() {
  local _iu=$1
  local _repository=$2
  local _stdout
  _stdout=$(eclipse -nosplash -application org.eclipse.equinox.p2.director\
   -repository $director_repository,$_repository\
   -installIU "$_iu" 2>&1 >/dev/null)
  [[ $? -eq 0 ]] || fail "couldn't install iu: $_iu" "$_stdout"
}

uninstall() {
  local _iu=$1
  local _stdout
  _stdout=$(eclipse -nosplash -application org.eclipse.equinox.p2.director\
   -uninstallIU "$_iu" 2>&1 >/dev/null)
  [[ $? -eq 0 ]] || fail "couldn't uninstall iu: $_iu" "$_stdout"
}

main() {
  source $1

  [[ -n $iu ]] || fail "missing required arguments: iu"
  [[ -z $state || $state = "present" || $state = "absent" ]] || fail "value of state must be one of: present,absent, got: $state"

  # http://stackoverflow.com/questions/592620/check-if-a-program-exists-from-a-bash-script
  hash eclipse 2>/dev/null || fail "required command not found: eclipse"

  readonly director_state="${state:-present}"

  release_repository director_repository

  if [[ $director_state = "present" ]]; then
    { verify $iu && printf '{"changed": false}'; } || { 
      install $iu $repository
      printf '{"changed": true}' 
    }
  else
    { verify $iu && uninstall $iu && printf '{"changed": true}'; } || printf '{"changed": false}' 
  fi
}

{ script && main $1; } || true
